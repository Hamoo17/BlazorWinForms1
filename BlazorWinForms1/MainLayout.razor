@inherits LayoutComponentBase
@inject Form1 frm
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout >
    <MudAppBar @onmousedown="EvMouseDown" @onmousemove="EvMouseMove" @onmouseup="EvMouseUp" @ondblclick="EvDoubleClick">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        My Application
        <MudSpacer />
        <MudSpacer />
        <MudSpacer />
        <MudSpacer />
        <MudSpacer />
        <MudSpacer />
        <MudSpacer />
              <MudTooltip Text="Messages"><MudIconButton Size="Size.Medium" Icon=@Icons.Filled.Email Style="color:white"></MudIconButton></MudTooltip>  
              <MudTooltip Text="Notification"><MudIconButton Size="Size.Medium" Icon=@Icons.Filled.Notifications Style="color:white"></MudIconButton></MudTooltip>  
         <MudSpacer  />
      <MudTooltip Text="Minimize Screen"><MudIconButton Size="Size.Small" OnClick="MinMize" Icon=@MiniMize Style="color:white"></MudIconButton></MudTooltip>  
        <MudTooltip Text="@WindState"><MudIconButton Size="Size.Small" OnClick="EvDoubleClick" Icon=@FullScreen Style="color:white"></MudIconButton></MudTooltip> 
        <MudTooltip Text="Close Application"><MudIconButton Size="Size.Small" OnClick="CloseApp" Icon=@Close Style="color:white"></MudIconButton></MudTooltip> 
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Variant="@DrawerVariant.Temporary" Anchor="Anchor.Start" Elevation="2">
        <BlazorWinForms1.Shared.MyNavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="padding-top:30px" >
        @Body
        </MudContainer>
    </MudMainContent>
    <MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp" />
</MudScrollToTop>
</MudLayout>
@code {
    bool _drawerOpen = false;
    bool MouseDown = false;
    Point startPoint = new Point(0, 0);
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    public string WindState { get; set; } = "Exit Full Screen";
    public string FullScreen { get; set; } = Icons.Filled.Fullscreen;
    public string FullScreenExit { get; set; } = Icons.Filled.FullscreenExit;
    public string MiniMize { get; set; } = Icons.Filled.HorizontalRule;
    public string Close { get; set; } = Icons.Filled.PowerSettingsNew;
    protected override Task OnInitializedAsync()
    {
        frm.Resize += (s, e) =>
         {
             WindState = frm.WindowState == FormWindowState.Maximized ? "Exit Full Screen" : "Full Screen";
             StateHasChanged();
		};
        return base.OnInitializedAsync();
    }
    private void CloseApp()
    {
         frm.Close();
    }
    private void MinMize()
    {
         frm.WindowState = FormWindowState.Minimized;
    }
    
    private void EvMouseDown( Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
        {
            MouseDown = true;
            startPoint = new Point(Convert.ToInt32(e.OffsetX),Convert.ToInt32(e.OffsetY));
        }

        private void EvMouseMove(  Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
        {
            if (MouseDown)
            {
                //int x = Cursor.Position.X - panel1.Size.Width /2;
                //int y = Cursor.Position.Y - panel1.Size.Height /2;
                //this.SetDesktopLocation(x, y);
                Point PP = new Point(Convert.ToInt32(e.OffsetX),Convert.ToInt32(e.OffsetY));
                Point p =  frm.PointToScreen(PP);
                 frm.Location = new Point(p.X - startPoint.X, p.Y - startPoint.Y);
            }

        }

        private void EvMouseUp(  Microsoft.AspNetCore.Components.Web.MouseEventArgs e)
        {
            MouseDown = false;
        }

        private void EvDoubleClick(  EventArgs e)
        {
            if (frm.WindowState == FormWindowState.Normal)
            {
               frm.WindowState = FormWindowState.Maximized;
            }
            else
            {
                 frm.WindowState = FormWindowState.Normal;
                
            }
        }
}
